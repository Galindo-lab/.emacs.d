
#+TITLE:  init.org
#+AUTHOR: Luis Eduardo Galindo Amaya
#+DATE:   2021-06-03                        

#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el

* Mi init.el 
** lun 07 jun 2021 21:14:39
Este es mi primer config de emacs, anteriormente ya habia hecho una pero era cuando notenia tanto conocimiento sobre este editor y todo lo que es capaz de hacer, depues de usar doom emacs por algunos meses pude apreder todo lo que es capaz de hacer he decidido volver a intentarlo, este es el resultado.

TODO: Crear una pantalla de inicio.
TODO: Crear un tema para el editor, el tema actual es solo una modificacion de [[https://github.com/owainlewis/emacs-color-themes][Graham]].
NOTE: Quizá crear una modeline?.
TODO: Instalacion de Autocompletado.
TODO: Instalar un engine de Snippets.
TODO: Instalar más modos de programación.

** lun 21 jun 2021 14:13:35
Añadi unas funciones para exportar a html desde org, estos dias he estado trabajando en mi blog por lo tanto las necesito.

* Backups
Extraido de [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-and-Backup.html][www.gnu.org]].
#+BEGIN_SRC elisp
  (add-to-list 'backup-directory-alist
               (cons "." "~/.emacs.d/backups/"))

  (customize-set-variable
   'tramp-backup-directory-alist backup-directory-alist)
#+END_SRC
 
* Fuente de paquetes
#+BEGIN_SRC elisp
  ;; Fuetes
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Inicializar 'use-package' para plataformas no unix
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  ;; Asegurarse de que los paquetes simepre esten instalados
  (setq use-package-always-ensure t)
#+END_SRC

* Configuración de paquetes
#+BEGIN_SRC elisp
  ;; Mantiene una lista con los archivos abiertos recientemente es necesario que este activado.
  (require 'recentf)
  (recentf-mode 1)

  ;; Autocompletado en el minibufer
  (use-package ivy
    :config
    (ivy-mode 1))                      ;Activar ivy en todos los buffers

  ;; explorador de archivos 
  (use-package neotree
    :config
    (setq neo-theme 'ascii)
    (setq neo-smart-open t)
    (setq neo-window-width 25)
    (setq neo-window-fixed-size -1))

  ;; desactivar los numeros y el warp de texto
  (add-hook 'neo-after-create-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

  ;; Colorear los valores RGB
  (use-package rainbow-mode)

  ;; Getor de git para emacs
  (use-package magit)

  ;; Collection of Ridiculously Useful eXtensions for Emacs
  (use-package crux)

  ;; eshell hooks
  (add-hook 'eshell-mode-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

  ;; highlight todo
  (use-package hl-todo
    :custom-face
    (hl-todo ((t (:inherit hl-todo :italic t))))
    :hook ((prog-mode . hl-todo-mode)
           (yaml-mode . hl-todo-mode)
           (org-mode . hl-todo-mode))
    :config
    (hl-todo-mode 1))

  ;; htmlize
  (use-package htmlize)

  ;; ample theme
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample-flat))
    :defer t
    :ensure t)


#+END_SRC

* Documentación de los paqutes
+ [[https://github.com/tarsius/hl-todo][h1-todo]], resalta palabras como "TODO, NOTE, FIXME..." [[https://www.reddit.com/r/emacs/comments/f8tox6/todo_highlighting/][extraido de aqui]].
+ [[https://github.com/bbatsov/crux][crux]], Añade un montón de funciones extra a emacs.
+ [[https://github.com/magit/magit][magit]], Cliente de GIT en emacs. 
+ [[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]], muestra los colores hex en el buffer (aparentemente no hay mucha documentación de este paquete).
+ [[https://github.com/jaypei/emacs-neotree][neotree]], muestra los folders en la sidebar.
+ [[https://github.com/abo-abo/swiper][ivy]], frontend de auto completado en emacs.
+ [[https://github.com/owainlewis/emacs-color-themes][Emacs themes]], los mejores color themes para emacs.
+ [[https://github.com/hniksic/emacs-htmlize][htmlize]], convierte el texto del búfer y las decoraciones asociadas a HTML.
+ [[https://github.com/jordonbiondo/ample-theme][ample themes]], temas bonitos.

* ORG mode
Este modo lo uso tanto que pense que deberia tener su propia seccion.
fuentes: [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][Tamaño del la preview de latex]], [[https://ivanaf.com/tikz_snippet_preview_in_orgmode.html][Preview tikz]], [[https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks][Indentar src blocks]].
#+BEGIN_SRC elisp
  (use-package org
    :bind
    (:map org-mode-map
          ("<M-return>" . org-toggle-latex-fragment))
    :config
    ;; (setq org-html-postamble "%a")
    (setq org-support-shift-select t)
    (setq org-preview-latex-default-process 'dvisvgm)       ;preview tikz
    (setq org-src-tab-acts-natively t)		      ;indentar src_blocks
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 1.5))) ;tamaño de preview

  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode t)
              (org-content 2)
              (display-line-numbers-mode -1)))
#+END_SRC

* ORG Babel
#+BEGIN_SRC elisp
  (org-babel-do-load-languages 'org-babel-load-languages '( (python . t) ) )
  (setq org-babel-python-command "python3")
#+END_SRC

* Apariencia
#+BEGIN_SRC elisp
  ;; Tipografia
  ;; (set-face-attribute 'default nil
  ;;                     :font "Fira Code"
  ;;                     :height 98 )

  ;; Tema
  ;;(load-file "~/.emacs.d/themes/sea.el")

  ;; otros
  (setq inhibit-startup-message t)     ;Pantalla de inicio de emacs 
  (global-display-line-numbers-mode t) ;numeros de linea
  (scroll-bar-mode -1)                 ;scroll bars visibles
  (tool-bar-mode -1)                   ;barra de herramientas visisles
  (menu-bar-mode -1)                   ;menu de herramientas visible
  (set-fringe-mode 10)                 ;espacio entre el frame y el buffer
  (global-visual-line-mode 1)          ;separar lineas 
  (setq-default cursor-type 'bar)      ;tipo del cursor

  ;; Mode line
  (setq column-number-mode t)          ;numero de columna 
  (line-number-mode t)                 ;numero de fila
  (display-time-mode -1)		 ;mostrar la hora
  (display-battery-mode -1)            ;mostrar batteria

  ;; Frame
  ;;(set-frame-parameter (selected-frame) 'undecorated t) ;frame visible
  ;;(set-frame-parameter (selected-frame) 'alpha '(95 95)) ;fondo trasparente
  ;;(add-to-list 'default-frame-alist '(alpha 85 85)) ;transparencia del borde
#+END_SRC

* Tema
#+BEGIN_SRC elisp
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample-flat))
    :defer t
    :ensure t)
#+END_SRC

* Settings
#+BEGIN_SRC elisp
  ;; Varios
  ;;(desktop-save-mode 1)                   ;guardar escritorio
  (find-file "~/notes.org")               ;abrir archivo al iniciar
#+END_SRC

* Global Keybinds
#+BEGIN_SRC elisp
  ;; incluidas
  (global-set-key (kbd "C-x t") 'eshell)                                    
  (global-set-key (kbd "C-x j") 'neotree-toggle)                            
  (global-set-key (kbd "C-x <") 'ido-switch-buffer)                         
  (global-set-key (kbd "C-M-z") 'toggle-80-editting-columns-balanced)      

  ;; Crux
  (global-set-key (kbd "C-c f") 'crux-recentf-find-file)
  (global-set-key (kbd "C-,") 'crux-find-user-init-file)
  (global-set-key (kbd "C-x C-u") 'crux-upcase-region)
  (global-set-key (kbd "C-x C-l") 'crux-downcase-region)
  (global-set-key (kbd "C-x M-c") 'crux-capitalize-region)
  (global-set-key (kbd "C-c k") 'crux-kill-other-buffers)
#+END_SRC

* Funciones
** [Disabled] Cerrar todos los buffer no activos
Extraido de la [[https://www.emacswiki.org/emacs/KillingBuffers#toc2][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp
  ;; (defun kill-other-buffers ()
  ;;   "Kill all other buffers."
  ;;   (interactive)
  ;;   (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** [Disabled] Insertar la fecha del sistema
extraido de la [[https://www.emacswiki.org/emacs/InsertingTodaysDate][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp
  ;; (defun insert-current-date () (interactive)
  ;;   (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
#+END_SRC

** Margen de 80 columnas
Extraido de [[https://qastack.mx/emacs/147/how-can-i-get-a-ruler-at-column-80][gastack]] desde la pregunta de [[https://gist.github.com/jordonbiondo/aa6d68b680abdb1a5f70][Jordonbiondo]].
#+BEGIN_SRC elisp
(defun toggle-80-editting-columns ()
  "Set the right window margin so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (set-window-margins nil 0 (max (- (window-width) 80) 0)))))

(defun toggle-80-editting-columns-balanced ()
  "Set both window margins so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (let* ((change (max (- (window-width) 80) 0))
             (left (/ change 2))
             (right (- change left)))
        (set-window-margins nil left right)))))
#+END_SRC

* Modificaciones De Prueba
#+BEGIN_SRC elisp 
;; ----------------- Modificaciones De Prueba -------------------
#+END_SRC

[[https://www.reddit.com/r/emacs/comments/98prqr/how_would_i_make_a_keybinding_run_a_shell_command/][Extraido de reddit]].
#+BEGIN_SRC elisp
(defun run-buffer ()
  (interactive)
  (shell-command (concat "./eigenmath " buffer-file-name)))
(global-set-key (kbd "<f9>") 'run-buffer)
#+END_SRC
