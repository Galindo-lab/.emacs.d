
#+TITLE:    GNU/Emacs
#+AUTHOR:   Galindo
#+PROPERTY: header-args :tangle init.el
-----

* Opcional
- Corrector ortogr√°fico ::
  =sudo apt-get install aspell-es=
  
- Instalar plantuml ::
  =wget https://sourceforge.net/projects/plantuml/files/plantuml.jar=
  
* PACKAGES
** package-archives 
#+begin_src elisp
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("org"   . "https://orgmode.org/elpa/")
          ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src

** package-initialize
#+BEGIN_SRC elisp
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Inicializar 'use-package' para plataformas no unix
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+END_SRC

#+RESULTS:

** use-package
#+begin_src elisp
  (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

* SETTINGS
** emacs 29
Desactivar mensajes de error (https://emacs.stackexchange.com/a/78802)
#+begin_src elisp
  (setq create-lockfiles nil)
  (setq warning-minimum-level :error)
#+end_src

** emacs
#+BEGIN_SRC elisp
  (use-package emacs
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)

    (setq-default cursor-type 'bar)
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
    (setq-default scroll-step 1)
    (setq-default inhibit-startup-screen t)
    (setq-default use-dialog-box nil)
    (setq-default display-fill-column-indicator-column 80)

    (setq-default cursor-type 'bar)
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
    (setq-default scroll-step 1)
    (setq-default inhibit-startup-screen t)

    (setq initial-major-mode 'fundamental-mode)
    (setq initial-scratch-message nil)
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)

    (add-to-list
     'backup-directory-alist (cons "." "~/.emacs.d/backups/"))

    (customize-set-variable
     'tramp-backup-directory-alist backup-directory-alist)

    (set-default 'truncate-lines -1)
    ;; (set-fringe-mode 10)
    (delete-selection-mode 1)
    (column-number-mode t)
    (line-number-mode t)
    (global-auto-revert-mode 1)
    (global-hl-line-mode 1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)

    :bind
    ("<f5>" . recompile)

    :hook
    (text-mode-hook . auto-fill-mode))
#+END_SRC

** scratch buffer
#+BEGIN_SRC elisp
  (setq initial-major-mode 'fundamental-mode)
  (setq initial-scratch-message nil)
#+END_SRC

** custom.el file
#+BEGIN_SRC elisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

** tab-bar-mode
#+begin_src elisp
  (tab-bar-mode 1)
#+end_src

*** COMMENT extras
#+begin_src elisp
  (keymap-set ctl-x-map "t" nil)
  (setq tab-prefix-map nil)
  (makunbound 'tab-prefix-map)
  (unload-feature 'tab-bar)
#+end_src

** COMMENT frame border
#+BEGIN_SRC elisp 
  (set-frame-parameter
   (selected-frame) 'undecorated t)
#+END_SRC

** COMMENT server dashboard
#+begin_src elisp
  (setq initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*")))
#+end_src

** COMMENT transparency
#+BEGIN_SRC elisp

  ;;Fondo trasparente
  (set-frame-parameter
   (selected-frame) 'alpha '(100 100))

  ;;Transparencia del borde
  (add-to-list
   'default-frame-alist '(alpha 95 95))

#+END_SRC

** COMMENT global modes
#+BEGIN_SRC elisp

  (set-fringe-mode 10)               ;Espaciado
  (column-number-mode t)             ;Numero de columna en el modeline
  (line-number-mode t)               ;Numero de fila en el modeline
  (scroll-bar-mode -1)               ;Scroll bars visibles
  (display-time-mode -1)             ;Mostrar la hora
  (display-battery-mode -1)          ;Mostrar batteria
  (delete-selection-mode 1)          ;Typed text replaces the selection
  (tool-bar-mode -1)                 ;Barra de herramientas visisles
  (menu-bar-mode -1)                 ;Menu de herramientas visible
  (global-hl-line-mode 1)            ;Cambiar el color de la line actual
  (global-auto-revert-mode 1)        ;Reload file changes on disk

#+END_SRC

* BACKUPS
** settings
#+BEGIN_SRC elisp

  (add-to-list 'backup-directory-alist
               (cons "." "~/.emacs.d/backups/"))

  (customize-set-variable 'tramp-backup-directory-alist
                          backup-directory-alist)

#+END_SRC

* STARTUP PERFORMANCE
** gcmh
#+BEGIN_SRC elisp

  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    ;; Setting garbage collection threshold
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6)
    (gcmh-mode 1)
    )

#+END_SRC

* PACKAGES
** magit
#+BEGIN_SRC elisp
  (use-package magit)
#+END_SRC

** recentf
#+BEGIN_SRC elisp
  (use-package recentf
    :config 
    (recentf-mode 1))
#+END_SRC

** ivy
Simple tools for minibuffer completion.
#+BEGIN_SRC elisp
  (use-package ivy
    :init   
    (ivy-mode 1)

    :bind   
    ("C-x <" . ido-switch-buffer))
#+END_SRC

** neotree
#+BEGIN_SRC elisp
  (when (display-graphic-p)
    (require 'all-the-icons))
  ;; or
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package neotree
    :bind    
    ("C-x j" . neotree-toggle)

    :config  
    (setq neo-window-width 42
          neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-smart-open t
          neo-window-fixed-size -1
          neo-autorefresh t
          neo-window-position 'right))
#+END_SRC

** which-key
Displays the key bindings.
#+BEGIN_SRC elisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** crux
Useful interactive commands.
#+BEGIN_SRC elisp
  (use-package crux
    :bind
    ("C-c f"   . crux-recentf-find-file)
    ("C-,"     . crux-find-user-init-file)
    ("C-x C-u" . crux-upcase-region)
    ("C-x C-l" . crux-downcase-region)
    ("C-x M-c" . crux-capitalize-region)
    ("C-c k"   . crux-kill-other-buffers)
    ("C-c t"   . crux-visit-term-buffer)
    ("C-c r"   . crux-rename-file-and-buffer))
#+END_SRC

** company
#+BEGIN_SRC elisp
  (use-package company
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 2
          company-show-numbers t
          company-tooltip-limit 10
          company-tooltip-align-annotations t
          company-tooltip-flip-when-above t)

    ;; (add-to-list 'company-backends 'company-clang)
    (add-to-list 'company-backends 'company-capf)

    (global-company-mode))
#+END_SRC

** lsp
#+begin_src elisp
  (use-package lsp-mode
    :hook
    (python-mode . lsp)
    (prolog-mode . lsp)

    :commands lsp)
#+end_src

** company-quickhelp
#+BEGIN_SRC elisp
  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+END_SRC

** git-gutter
#+BEGIN_SRC elisp
  (use-package git-gutter)
#+END_SRC

#+RESULTS:

** hl-todo
#+BEGIN_SRC elisp
  (use-package hl-todo
    :custom-face
    (hl-todo ((t (:inherit hl-todo :italic t))))

    :hook
    (prog-mode . hl-todo-mode)
    (yaml-mode . hl-todo-mode)
    (org-mode . hl-todo-mode)

    :config
    (setq hl-todo-mode 1))
#+END_SRC

** format-all
#+BEGIN_SRC elisp
  (use-package format-all)
#+END_SRC

** emmet
#+BEGIN_SRC elisp
  (use-package emmet-mode
    :config
    (setq emmet-expand-jsx-className? t)

    :hook
    (sgml-mode . emmet-mode)
    (css-mode . emmet-mode))
#+END_SRC

** gnuplot
#+BEGIN_SRC elisp
  (use-package gnuplot)
#+END_SRC

** rainbow-mode
#+BEGIN_SRC elisp
  (use-package rainbow-mode)
#+END_SRC

** yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/yasnippet/"))
    (yas-global-mode 1))
#+END_SRC

** imenu-list
#+BEGIN_SRC elisp
  (use-package imenu-list)
#+END_SRC

** lorem-ipsum
#+BEGIN_SRC elisp
  (use-package lorem-ipsum)
#+END_SRC

** rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** plantuml
#+begin_src elisp
  (use-package plantuml-mode
    :config
    (setq plantuml-jar-path "~/.emacs.d/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-output-type "png"))
#+end_src

** zen-mode
#+begin_src elisp
  (use-package zen-mode)
#+end_src

** centered-window
#+BEGIN_SRC elisp
  (use-package centered-window
    :hook
    (org-mode . centered-window-mode)
    (prog-mode . centered-window-mode))
#+END_SRC

** spacius-padding
#+begin_src elisp
  (use-package spacious-padding
    :ensure t
    :hook
    (after-init . spacious-padding-mode))
#+end_src

** yaml
#+begin_src elisp
  (use-package yaml-mode)
#+end_src

** dashboard
#+BEGIN_SRC elisp
  (use-package dashboard
    :config
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t
          dashboard-items '((recents  . 10)
                            ;; (bookmarks . 10)
                            ))

    (dashboard-setup-startup-hook)
    )
#+END_SRC

** COMMENT solair
#+begin_src elisp
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
#+end_src

** COMMENT golden-ratio
#+begin_src elisp
  (use-package golden-ratio
    :ensure t
    :hook
    (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-auto-scale t)
    (golden-ratio-exclude-modes '(treemacs-mode occur-mode)))
#+end_src

** COMMENT projectile
#+BEGIN_SRC elisp
  (use-package projectile
    :config (projectile-mode +1)
    :bind   (:map projectile-mode-map
                  ("s-p"   . projectile-command-map)
                  ("C-c p" . projectile-command-map)
                  ))

#+END_SRC

** COMMENT all-the-icons
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

* PROGRAMMING MODE
** prog-mode
#+begin_src elisp
  (use-package prog-mode
    :ensure nil
    :hook 
    (prog-mode . display-line-numbers-mode)
    (prog-mode . display-fill-column-indicator-mode))
#+end_src

** latex
#+begin_src elisp
  (use-package latex-mode
    :ensure nil
    :hook
    (latex-mode . auto-fill-mode))
#+end_src

** markdown
#+BEGIN_SRC elisp
  (use-package markdown-mode
    :hook
    (markdown-mode . auto-fill-mode)
    
    :init
    (setq markdown-command "multimarkdown")

    :mode
    ("README\\.md\\'" . gfm-mode))
#+END_SRC

** python
#+BEGIN_SRC elisp
  (use-package anaconda-mode
    :hook
    (python-mode . anaconda-mode)
    (python-mode . anaconda-eldoc-mode))

  (use-package company-anaconda
    :init 
    (require 'rx)

    :after 
    (company)

    :config
    (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** web
#+BEGIN_SRC elisp
  (use-package company-web
    :init
    (require 'rx)

    :after
    (company)

    :config
    (add-to-list 'company-backends 'company-web-html))
#+END_SRC

** lua
#+BEGIN_SRC elisp
  (use-package lua-mode)
#+END_SRC

** R/ESS
#+BEGIN_SRC elisp
  (use-package ess)
#+END_SRC

** nasm
#+BEGIN_SRC elisp
  (use-package nasm-mode
    :mode "\\.asm\\'")
#+END_SRC

** racket 
#+begin_src elisp
  (use-package racket-mode)
#+end_src

** haskell
#+begin_src elisp
  (use-package haskell-mode)
#+end_src

** COMMENT yaml
#+begin_src elisp
  (use-package yaml-mode)
#+end_src

** COMMENT c/c++
#+BEGIN_SRC elisp

  (use-package cc-mode
    :bind  
    ("<f5>"   . recompile)
    )

  (use-package company-clang
    :init
    (require 'rx)

    :after
    (company)
    )

#+END_SRC

* ORG-MODE
** org
#+BEGIN_SRC elisp
  (use-package org
    :hook
    (org-mode . auto-fill-mode)
    (org-mode . (lambda ()
                  ;; (visual-line-mode)
                  ;; (org-indent-mode t)
                  (org-content 2)))

    :config
    (setq org-confirm-babel-evaluate nil)
    (setq org-support-shift-select t)
    (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-html-htmlize-output-type `nil)
    (setq org-src-tab-acts-natively t)
    (setq org-html-htmlize-output-type 'nil)
    (setq org-latex-caption-above nil)
    (setq org-babel-python-command "python3")

    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 1))

    (setq org-plantuml-jar-path
          (expand-file-name "~/.emacs.d/plantuml.jar"))

    (setq org-latex-pdf-process
          '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (latex . t)
       (ditaa . t)
       (maxima . t)
       (octave . t)
       (plantuml . t)
       (shell . t)))

    :bind
    (:map org-mode-map
          ("<M-return>" . org-toggle-latex-fragment)))
#+END_SRC

** modern
#+begin_src elisp
  (use-package org-modern
    :hook
    (org-mode . org-modern-mode))
#+end_src

** roam
#+begin_src elisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/.emacs.d/roam/"))
    (setq org-roam-dailies-directory "~/.emacs.d/roam/journal/")


    :bind 
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n g" . org-roam-graph)
    ("C-c n i" . org-roam-node-insert)
    ("C-c n c" . org-roam-capture)

    :config
    (setq org-roam-node-display-template
          (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+end_src

* SHELLS
** vterm
#+begin_src elisp
  (use-package vterm)
#+end_src

** COMMENT eshell
#+BEGIN_SRC elisp
  (use-package eshell
    :config
    (setq eshell-prompt-function
          (lambda ()
            (concat
             (format-time-string "[%H:%M]" (current-time))
             (if (magit-get-current-branch)
                 (concat "[git:" (magit-get-current-branch) "]" )
               "")
             " "
             (abbreviate-file-name (eshell/pwd))
             "\n"
             " > "
             )))

    (setq eshell-prompt-regexp " > ")   ; or " > "
    (setq eshell-prompt-string " > ")   ; or " > "
    )
#+END_SRC


* THEMES
** doom-themes
#+BEGIN_SRC elisp
  (use-package doom-themes
    :config
    ;; (load-theme 'doom-opera t)
    ;; (load-theme 'doom-one t)
    (load-theme 'doom-tomorrow-night)
    )
#+END_SRC

*** toggle themes
#+begin_src elisp
  (defun doom-toggle-theme ()
    "Alterna entre dos temas personalizados en Emacs."
    (interactive)
    (if (eq (car custom-enabled-themes) 'doom-opera-light)
        (progn
          (disable-theme 'doom-opera-light)
          (load-theme 'doom-opera t))
      (progn
        (disable-theme 'doom-opera)
        (load-theme 'doom-opera-light t))))
#+end_src

** COMMENT tao-theme
#+begin_src elisp
  (use-package tao-theme
    :config
    (load-theme 'tao-yin t))
#+end_src

** COMMENT modus-themes
#+begin_src elisp
  (use-package modus-themes
    :config
    ;; (load-theme 'modus-operandi t)
    ;; (load-theme 'modus-vivendi t)        
    (load-theme 'modus-vivendi-deuteranopia t))
#+end_src

* MODELINE
** telephone-line
#+BEGIN_SRC elisp
  (use-package telephone-line
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-flat
          telephone-line-secondary-left-separator 'telephone-line-flat
          telephone-line-primary-right-separator 'telephone-line-flat
          telephone-line-secondary-right-separator 'telephone-line-flat
          telephone-line-mode 1))
#+END_SRC
** COMMENT doom-modeline
#+begin_src elisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-vcs-max-length 12)
    (setq doom-modeline-battery t)
    (setq doom-modeline-time t)
    )
#+end_src

* EASTER-EGGS
** fireplace
#+begin_src elisp
  (use-package fireplace)
#+end_src

* CUSTOM
** kill-other-buffers
#+begin_src elisp
  (defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer 
            (delq (current-buffer) 
                  (remove-if-not 'buffer-file-name (buffer-list)))))
#+end_src

** reverse-region
#+BEGIN_SRC elisp
  (defun reverse-region (beg end)
    "Reverse characters between BEG and END."
    (interactive "r")
    (let ((region (buffer-substring beg end)))
      (delete-region beg end)
      (insert (nreverse region))))
#+END_SRC

** COMMENT reverse-region
#+begin_src elisp
  (defun reverse-word ()
    "Reverse the word at point."
    (interactive)
    (let ((word (thing-at-point 'word)))
      (if word
          (let ((word-reversed (reverse (string-to-list word))))
            (delete-region (point) (progn (forward-word) (point)))
            (insert (apply #'string word-reversed)))
        (error "No word at point"))))
#+end_src

** COMMENT convert-to-hex
#+begin_src elisp
  (defun convert-to-hex (num)
  "Convert NUM to hexadecimal and insert it into the current buffer."
  (interactive "nEnter number to convert: ")
  (insert (format "%x" num)))
#+end_src

