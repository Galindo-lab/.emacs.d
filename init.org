
#+TITLE:  init.org
#+AUTHOR: Luis Eduardo Galindo Amaya
#+DATE:   2021-06-03                        

#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el



* Notas 
** Bitácora
- lun 07 jun 2021 21:14:39 :: Este es mi primer config de emacs, anteriormente ya habia hecho una pero era cuando notenia tanto conocimiento sobre este editor y todo lo que es capaz de hacer, depues de usar doom emacs por algunos meses pude apreder todo lo que es capaz de hacer he decidido volver a intentarlo, este es el resultado.

- lun 21 jun 2021 14:13:35 :: Añadi unas funciones para exportar a html desde org, estos dias he estado trabajando en mi blog por lo tanto las necesito.

- sáb 10 jul 2021 17:27:35 :: Este init file se esta volviendo muy largo, tendre que buscar otra organizacion para gestionarlo. Uno de los objetivos principales de este init es que sea que sea un unico archivo.

- sáb 10 jul 2021 20:26:11 :: Ya terminé de reorganizar el init file ahora es más especifico.

- mar 20 jul 2021 12:35:41 :: Añadidos algunos modos extra y tema doom-one es el default.

- jue 29 jul 2021 13:47:50 :: Modo de python añadidos y dashboard agregado.

- vie 30 jul 2021 17:23:12 :: Reorganizado.

** tips 
*** Expancion de code blocks
|------------------------+-----------------------------------------|
| Typing the below + TAB | Expands to …                            |
|------------------------+-----------------------------------------|
| <a                     | ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT  |
| <c                     | ’#+BEGIN_CENTER’ … ‘#+END_CENTER’       |
| <C                     | ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’     |
| <e                     | ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’     |
| <E                     | ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’       |
| <h                     | ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
| <l                     | ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
| <q                     | ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’         |
| <s                     | ’#+BEGIN_SRC’ … ‘#+END_SRC’             |
| <v                     | ’#+BEGIN_VERSE’ … ‘#+END_VERSE’         |
|------------------------+-----------------------------------------|

** Por hacer
TODO: Instalar un engine de Snippet
* Paquetes
** Fuentes
#+BEGIN_SRC elisp

  ;; Fuetes
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Inicializar 'use-package' para plataformas no unix
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  ;; Asegurarse de que los paquetes simepre esten instalados
  ;; (setq use-package-always-ensure t)

#+END_SRC

** Configuraciónes
*** recentf
Mantiene una lista con los archivos abiertos recientemente, es necesario que este activado para mantener los registros.
#+BEGIN_SRC elisp 

  (require 'recentf)
  (recentf-mode 1)

#+END_SRC

*** ivy
Autocompletado en el minibufer.
#+BEGIN_SRC elisp

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

#+END_SRC

*** rainbow-mode
Colorear los valores RGB.
#+BEGIN_SRC elisp

  (use-package rainbow-mode
    :ensure t)

#+END_SRC

*** magit
Getor de git para emacs.
#+BEGIN_SRC elisp

  (use-package magit
    :ensure t)

#+END_SRC

*** crux
Collection of Ridiculously Useful eXtensions for Emacs.
#+BEGIN_SRC elisp

  (use-package crux
    :ensure t)

#+END_SRC

*** highlight todo
Resalta palabras como "TODO, NOTE, FIXME...".
#+BEGIN_SRC elisp

  (use-package hl-todo
    :ensure t
    :custom-face
    (hl-todo ((t (:inherit hl-todo :italic t))))
    :hook ((prog-mode . hl-todo-mode)
           (yaml-mode . hl-todo-mode)
           (org-mode . hl-todo-mode))
    :config
    (hl-todo-mode 1))

#+END_SRC

*** htmlize
Convierte source blocks a html.
#+BEGIN_SRC elisp

  (use-package htmlize
    :ensure t)

#+END_SRC

*** neotree
Muestra los folders en la sidebar.
#+BEGIN_SRC elisp

  ;; explorador de archivos 
  (use-package neotree
    :ensure t
    :config
    (setq neo-theme 'ascii
          neo-smart-open t
          neo-window-width 25
          neo-window-fixed-size -1) )

  ;; desactivar los numeros y el warp de texto 
  (add-hook 'neo-after-create-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

#+END_SRC

*** company
Marco de autocompletado de texto para Emacs.
#+BEGIN_SRC elisp

  ;; (use-package company
  ;;   :ensure t
  ;;   :defer t
  ;;   :init (global-company-mode)
  ;;   :config
  ;;   (progn
  ;;     ;; Use Company for completion
  ;;     (bind-key [remap completion-at-point] #'company-complete company-mode-map)

  ;;     (setq company-tooltip-align-annotations t
  ;;           ;; Easy navigation to candidates with M-<n>
  ;;           company-show-numbers t)
  ;;     (setq company-dabbrev-downcase nil))
  ;;   :diminish company-mode)

  (use-package company
   :ensure t
   :config
   (setq company-idle-delay 0
         company-minimum-prefix-length 2
         company-show-numbers t
         company-tooltip-limit 10
         company-tooltip-align-annotations t
         ;; invert the navigation direction if the the completion popup-isearch-match
         ;; is displayed on top (happens near the bottom of windows)
         company-tooltip-flip-when-above t)

   (global-company-mode t)
   )

  (use-package company-quickhelp
    ;; Quickhelp may incorrectly place tooltip towards end of buffer
    ;; See: https://github.com/expez/company-quickhelp/issues/72
    :ensure t
    :config
    (company-quickhelp-mode)
    )

#+END_SRC

*** csv-mode
#+BEGIN_SRC elisp
  (use-package csv-mode
    :ensure t)
#+END_SRC

*** dashboard
#+BEGIN_SRC elisp
(use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-startup-banner 1)
    (setq dashboard-center-content t)
    ;; (setq dashboard-banner-logo-title "your custom text")
    ;; (setq dashboard-startup-banner "/path/to/image")
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)))
    (dashboard-setup-startup-hook))

#+END_SRC

** Modos y Herramientas de Programación
*** Web
#+BEGIN_SRC elisp

  ;; para editar codigo html, css y js en el mismo archivo
  (use-package web-mode
    :ensure t)

  ;; para hacer html más rapidos
  (use-package emmet-mode
    :ensure t)

#+END_SRC

*** Lua
#+BEGIN_SRC elisp

  (use-package lua-mode
    :ensure t)

#+END_SRC

*** Python (anaconda)
#+BEGIN_SRC elisp

  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    ;;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    )

  (use-package company-anaconda
    :ensure t
    :init (require 'rx)
    :after (company)
    :config
    (add-to-list 'company-backends 'company-anaconda)
    )

#+END_SRC

** Documentación
+ [[https://github.com/tarsius/hl-todo][h1-todo]] :: resalta palabras como "TODO, NOTE, FIXME..." [[https://www.reddit.com/r/emacs/comments/f8tox6/todo_highlighting/][extraido de aqui]].
+ [[https://github.com/bbatsov/crux][crux]] :: Añade un montón de funciones extra a emacs.
+ [[https://github.com/magit/magit][magit]] :: Cliente de GIT en emacs. 
+ [[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]] :: Muestra los colores hex en el buffer (aparentemente no hay mucha documentación de este paquete).
+ [[https://github.com/jaypei/emacs-neotree][neotree]] :: Muestra los folders en la sidebar.
+ [[https://github.com/abo-abo/swiper][ivy]] :: Frontend de auto completado en emacs.
+ [[https://github.com/owainlewis/emacs-color-themes][Emacs themes]] :: Los mejores color themes para emacs.
+ [[https://github.com/hniksic/emacs-htmlize][htmlize]] :: Convierte el texto del búfer y las decoraciones asociadas a HTML.
+ [[https://github.com/jordonbiondo/ample-theme][ample themes]] :: Temas bonitos.
+ [[https://web-mode.org/][web-mode]] :: Permite editar en los lenguajes de la web dentro del mismo archivo.
+ [[http://company-mode.github.io/][company-mode]] :: Marco de autocompletado de texto para Emacs.
+ [[https://github.com/smihica/emmet-mode][emmet-mode]] :: Escribir codigo xml mas rapido.
+ [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode]] :: Python completation.

* Configuración
** Apariencia
Ajustes visuales que no afectan de ninguna forma el comportamiento del editor
#+BEGIN_SRC elisp

  (set-face-attribute 'default nil
                      :font "Fira Code"
                      :height 98 )

  ;; Ajustes 
  ;; Pantalla de inicio de emacs
  (setq inhibit-startup-message t)
  ;; numeros de linea
  (global-display-line-numbers-mode t)
  ;; scroll bars visibles
  (scroll-bar-mode -1)
  ;; barra de herramientas visisles
  (tool-bar-mode -1)
  ;; menu de herramientas visible
  (menu-bar-mode -1)
  ;; espacio entre el frame y el buffer	   
  (set-fringe-mode 10)
  ;; separar lineas 
  (global-visual-line-mode 1)
  ;; tipo del cursor
  (setq-default cursor-type 'bar)
  ;; tamaño del tab
  (setq-default tab-width 4)

  ;; Mode line
  ;; numero de columna
  (setq column-number-mode t)
  ;; numero de fila
  (line-number-mode t)
  ;; mostrar la hora             
  (display-time-mode -1)
  ;; mostrar batteria
  (display-battery-mode -1)

#+END_SRC

** Frame
#+BEGIN_SRC elisp :tangle no

  ;; frame visible
  (set-frame-parameter (selected-frame) 'undecorated t) 
  ;; fondo trasparente
  (set-frame-parameter (selected-frame) 'alpha '(95 95))
  ;; transparencia del borde
  (add-to-list 'default-frame-alist '(alpha 85 85)) 

#+END_SRC

** Tema
#+BEGIN_SRC elisp
 
  (use-package doom-themes :ensure t)
  (load-theme 'doom-one t)

#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample-flat))
    :defer t
    :ensure t)
  (use-package underwater-theme)
  (use-package challenger-deep-theme)
  (use-package nord-theme)			  
  (use-package mood-one-theme)
  (use-package weyland-yutani-theme)
  (load-theme 'wombat)
#+END_SRC

** Comportamiento
#+BEGIN_SRC elisp

  ;; guardar escritorio
  ;;(desktop-save-mode 1)                 
  ;; abrir archivo al iniciar
  ;; (find-file "~/notes.org")        
  ;; eliminar elemento seleccionado   
  (delete-selection-mode 1)	
  (setq-default indent-tabs-mode nil)	

#+END_SRC

** Eshell
#+BEGIN_SRC elisp

  (add-hook 'eshell-mode-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

#+END_SRC

** Keybinds
#+BEGIN_SRC elisp

  ;; incluidas
  (global-set-key (kbd "C-x t") 'eshell)                                    
  (global-set-key (kbd "C-x j") 'neotree-toggle)                            
  (global-set-key (kbd "C-x <") 'ido-switch-buffer)                         
  (global-set-key (kbd "C-M-z") 'toggle-80-editting-columns-balanced)      

  ;; Crux
  (global-set-key (kbd "C-c f") 'crux-recentf-find-file)
  (global-set-key (kbd "C-,") 'crux-find-user-init-file)
  (global-set-key (kbd "C-x C-u") 'crux-upcase-region)
  (global-set-key (kbd "C-x C-l") 'crux-downcase-region)
  (global-set-key (kbd "C-x M-c") 'crux-capitalize-region)
  (global-set-key (kbd "C-c k") 'crux-kill-other-buffers)

#+END_SRC

** Org
fuentes: [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][Tamaño del la preview de latex]], [[https://ivanaf.com/tikz_snippet_preview_in_orgmode.html][Preview tikz]], [[https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks][Indentar src blocks]].
#+BEGIN_SRC elisp

  (use-package org
    :bind
    (:map org-mode-map
          ("<M-return>" . org-toggle-latex-fragment))
    :config
    (setq org-support-shift-select t)
    (setq org-preview-latex-default-process 'dvisvgm)	;preview tikz
    (setq org-src-tab-acts-natively t)	;indentar src_blocks
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 1.5))) ;tamaño de preview


  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode t)
              (org-content 2)
              (display-line-numbers-mode -1)))

  ;; Babel
  (org-babel-do-load-languages 'org-babel-load-languages '( (python . t) ) )
  (setq org-babel-python-command "python3")

#+END_SRC

** prettify simbols
#+BEGIN_SRC elisp


    ;; (defun org-icons ()
    ;;   "Beautify org mode keywords."
    ;;   (setq prettify-symbols-alist '(("=>" . "⟹")
    ;;                                  ("<=" . "⟸")
    ;;                                  ("->" . "⟶")
    ;;                                  ("<-" . "⟵")))
    ;;   (prettify-symbols-mode))

  (defun prettify-set ()
    (setq prettify-symbols-alist
          (prettify-utils-generate
           ("lambda"	"λ")
           ("|>"		"▷")
           ("<|"		"◁")
           ("->>"		"↠")
           ("->"		"→")
           ("<-"		"←")
           ("=>"		"⇒")
           ("<="		"≤")
           (">="		"≥")
           )))



#+END_SRC

** Backups
Extraido de [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-and-Backup.html][www.gnu.org]].
#+BEGIN_SRC elisp

  (add-to-list 'backup-directory-alist
               (cons "." "~/.emacs.d/backups/"))

  (customize-set-variable
   'tramp-backup-directory-alist backup-directory-alist)

#+END_SRC

* Funciones
** Cerrar todos los buffer no activos
Extraido de la [[https://www.emacswiki.org/emacs/KillingBuffers#toc2][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp :tangle no

  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

#+END_SRC

** Insertar la fecha del sistema
extraido de la [[https://www.emacswiki.org/emacs/InsertingTodaysDate][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp :tangle no

  (defun insert-current-date () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

#+END_SRC

** Margen de 80 columnas
Extraido de [[https://qastack.mx/emacs/147/how-can-i-get-a-ruler-at-column-80][gastack]] desde la pregunta de [[https://gist.github.com/jordonbiondo/aa6d68b680abdb1a5f70][Jordonbiondo]].
#+BEGIN_SRC elisp

(defun toggle-80-editting-columns ()
  "Set the right window margin so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (set-window-margins nil 0 (max (- (window-width) 80) 0)))))

(defun toggle-80-editting-columns-balanced ()
  "Set both window margins so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (let* ((change (max (- (window-width) 80) 0))
             (left (/ change 2))
             (right (- change left)))
        (set-window-margins nil left right)))))

#+END_SRC

* External file
#+BEGIN_SRC elisp

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

#+END_SRC

* Modificaciones de Prueba
** Programas externos 
[[https://www.reddit.com/r/emacs/comments/98prqr/how_would_i_make_a_keybinding_run_a_shell_command/][Reddit - how_would_i_make_a_keybinding_run_a_shell_command]]
#+BEGIN_SRC elisp 

  (defun run-buffer ()
    (interactive)
    (shell-command (concat "./eigenmath " buffer-file-name)))
  (global-set-key (kbd "<f9>") 'run-buffer)

#+END_SRC

** scolling suave
#+BEGIN_SRC elisp

  (setq scroll-step            1
        scroll-conservatively  10000)

#+END_SRC
