
#+TITLE: GNU/Emacs Config
#+AUTHOR: Luis E. Galindo Amaya

#+DESCRIPTION: Galindo personal Emacs config.
#+PROPERTY: header-args :tangle init.el

* LICENCE
#+BEGIN_SRC elisp
  ;; 
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

#+END_SRC

* TITLE
#+BEGIN_SRC elisp

  ;; ----------------------------------------------------------------------------
  ;; 
  ;;         ##    .#              
  ;; /     ###############          Luis E. Galindo Amaya
  ;; ######     ,#     /####        https://galindosoft.neocities.org
  ;; (##       #          #######   https://github.com/Galindo-lab
  ;;         #        ##     #    
  ;;       (      ## ####         
  ;;      #,  ,##      ##         
  ;;     #####         ##         
  ;;                   / 
  ;; 
  ;; ----------------------------------------------------------------------------

#+END_SRC
                             
* PACKAGES
#+BEGIN_SRC elisp

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Inicializar 'use-package' para plataformas no unix
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

* SETTINGS
** global defaults
[[https://stackoverflow.com/a/18173666][¿Para qué es setq-default?]]

#+BEGIN_SRC elisp
  
  (setq-default 
   cursor-type 'bar                  ;Tipo del cursor
   tab-width 4                       ;Tamaño del tab
   indent-tabs-mode nil              ;Desactivar tabs
   scroll-step 1                     ;Smooth scrolling
   inhibit-startup-screen t          ;Hide startup screen
   use-dialog-box nil                ;Disable the use of dialog boxes
   )

#+END_SRC

** global modes
#+BEGIN_SRC elisp

  (set-fringe-mode 10)               ;Espaciado
  (column-number-mode t)             ;Numero de columna en el modeline
  (line-number-mode t)               ;Numero de fila en el modeline
  (scroll-bar-mode -1)               ;Scroll bars visibles
  (display-time-mode -1)             ;Mostrar la hora
  (display-battery-mode -1)          ;Mostrar batteria
  (delete-selection-mode 1)          ;Typed text replaces the selection
  (tool-bar-mode -1)                 ;Barra de herramientas visisles
  (menu-bar-mode -1)                 ;Menu de herramientas visible
  (global-hl-line-mode 1)            ;Cambiar el color de la line actual
  (global-auto-revert-mode 1)        ;Reload file changes on disk

#+END_SRC

** yes or no
#+BEGIN_SRC elisp

  ;;Usar solo y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** frame border
#+BEGIN_SRC elisp :tangle none

  ;;Frame visible
  (set-frame-parameter
   (selected-frame) 'undecorated t) 

#+END_SRC

** transparency
#+BEGIN_SRC elisp :tangle no

  ;;Fondo trasparente
  (set-frame-parameter
   (selected-frame) 'alpha '(95 95))
  
  ;;Transparencia del borde
  (add-to-list
   'default-frame-alist '(alpha 85 85))

#+END_SRC

** scratch buffer
#+BEGIN_SRC elisp

  (setq initial-major-mode 'fundamental-mode)
  (setq initial-scratch-message nil)

#+END_SRC

** custom.el file
#+BEGIN_SRC elisp

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

#+END_SRC

* BACKUPS
#+BEGIN_SRC elisp

  (add-to-list 'backup-directory-alist
               (cons "." "~/.emacs.d/backups/"))

  (customize-set-variable 'tramp-backup-directory-alist
                          backup-directory-alist)

#+END_SRC

* STARTUP PERFORMANCE
#+BEGIN_SRC elisp

  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    ;; Setting garbage collection threshold
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6)
    (gcmh-mode 1)
    )

#+END_SRC

* PACKAGES
** recentf
Recently opened files.
#+BEGIN_SRC elisp

  (use-package recentf
    :config
    (recentf-mode 1)
    )

#+END_SRC

** ivy
Simple tools for minibuffer completion.
#+BEGIN_SRC elisp

  (use-package ivy
    :init
    (ivy-mode 1)

    :bind
    ("C-x <" . ido-switch-buffer)
    )

#+END_SRC

** magit
Git inside of Emacs.
#+BEGIN_SRC elisp

  (use-package magit
  )

#+END_SRC

** projectile
Project interaction library for Emacs
#+BEGIN_SRC elisp

  (use-package projectile
    :config
    (projectile-mode +1)

    :bind
    (:map projectile-mode-map
          ("s-p"   . projectile-command-map)
          ("C-c p" . projectile-command-map))
    )

#+END_SRC

** neotree
A Emacs tree plugin like NerdTree for Vim.
#+BEGIN_SRC elisp

  (use-package neotree
    :bind
    ("C-x j" . neotree-toggle)

    :config
    (setq neo-theme 'ascii
          neo-smart-open t
          neo-window-width 25
          neo-window-fixed-size -1
          neo-autorefresh t)
    )

#+END_SRC

** which-key
Displays the key bindings.
#+BEGIN_SRC elisp

  (use-package which-key
    :config
    (which-key-mode)
    )

#+END_SRC

** crux
Useful interactive commands.
#+BEGIN_SRC elisp

  (use-package crux
    :bind
    ("C-c f"   . crux-recentf-find-file)
    ("C-,"     . crux-find-user-init-file)
    ("C-x C-u" . crux-upcase-region)
    ("C-x C-l" . crux-downcase-region)
    ("C-x M-c" . crux-capitalize-region)
    ("C-c k"   . crux-kill-other-buffers)
    ("C-c t"   . crux-visit-term-buffer)
    )

#+END_SRC

** dashboard
An extensible emacs startup screen.
#+BEGIN_SRC elisp

  (use-package dashboard
    :config
    (setq dashboard-startup-banner "~/.emacs.d/res/nu_35.txt")
    (setq dashboard-center-content t
          dashboard-items '((recents  . 10)
                            ;; (bookmarks . 10)
                            ))

    (dashboard-setup-startup-hook)
    )

#+END_SRC

** doom-themes
Doom Emacs theme pack
#+BEGIN_SRC elisp

  (use-package doom-themes
    :config
    (load-theme 'doom-opera t)
    )

#+END_SRC

** company
text completion framework for Emacs.
#+BEGIN_SRC elisp

  (use-package company
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 2
          company-show-numbers t
          company-tooltip-limit 10
          company-tooltip-align-annotations t
          company-tooltip-flip-when-above t)
    (add-to-list 'company-backends 'company-clang)
    (global-company-mode)
    )

#+END_SRC

** company-quickhelp
Company popups.
#+BEGIN_SRC elisp

  (use-package company-quickhelp
    :config
    (company-quickhelp-mode)
    )

#+END_SRC

** git-gutter
Show inserted, modified or deleted lines.
#+BEGIN_SRC elisp

  (use-package git-gutter
    :ensure t

    ;; :config
    ;; (global-git-gutter-mode +1)
    )


#+END_SRC

** centered-window
Centers the text of the window
#+BEGIN_SRC elisp

  (use-package centered-window
    )

#+END_SRC

** hl-todo
Highlight words like TODO, FIXME, NOTE, DONE
#+BEGIN_SRC elisp

(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit hl-todo :italic t))))

  :hook
  ((prog-mode . hl-todo-mode)
   (yaml-mode . hl-todo-mode)
   (org-mode . hl-todo-mode))

  :config
  (setq hl-todo-mode 1)
  )

#+END_SRC

** rainbow-delimiters
Highlights delimiters
#+BEGIN_SRC elisp

  (use-package rainbow-delimiters
    :hook
    (prog-mode-hook . rainbow-delimiters-mode)
    )

#+END_SRC

** format-all
Format code.
#+BEGIN_SRC elisp

  (use-package format-all
    )

#+END_SRC

** emmet
Expanded feature set.
#+BEGIN_SRC elisp

  (use-package emmet-mode
    :hook
    ((sgml-mode . emmet-mode))
    )

#+END_SRC

** gnuplot
Running gnuplot files from within the GNU Emacs editor.
#+BEGIN_SRC elisp

  (use-package gnuplot
    )

#+END_SRC

** rainbow-mode
Sets background color to strings that match color names
#+BEGIN_SRC elisp

  (use-package rainbow-mode
    )

#+END_SRC

** telephone-line
A new implementation of Powerline for Emacs
#+BEGIN_SRC elisp

  (use-package telephone-line
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-flat
          telephone-line-secondary-left-separator 'telephone-line-flat
          telephone-line-primary-right-separator 'telephone-line-flat
          telephone-line-secondary-right-separator 'telephone-line-flat
          telephone-line-mode 1)
    )

#+END_SRC

** yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/yasnippet/"))
    (yas-global-mode 1)
    )
#+END_SRC

** imenu-list
#+BEGIN_SRC elisp
  (use-package imenu-list)
#+END_SRC

* ORG-MODE
#+BEGIN_SRC elisp

  (use-package org
    :hook
    (org-mode . (lambda ()
                  ;; (org-indent-mode t)
                  (org-content 2)
                  (org-startup-truncated)
                  (toggle-truncate-lines)
                  ))

    :config
    (setq org-confirm-babel-evaluate nil)

    (setq org-support-shift-select t
          org-preview-latex-default-process 'dvisvgm
          org-html-htmlize-output-type `nil
          org-src-tab-acts-natively t
          org-format-latex-options
          (plist-put org-format-latex-options :scale 1.5))

    (org-babel-do-load-languages
     'org-babel-load-languages '((emacs-lisp . t)
                                 (python . t)
                                 (latex . t)
                                 (ditaa . t)
                                 (maxima . t)
                                 (octave . t)
                                 (plantuml . t)
                                 (shell . t)))

    (setq org-html-htmlize-output-type 'nil)

    :bind
    (:map org-mode-map
          ("<M-return>" . org-toggle-latex-fragment))

    )

#+END_SRC

* ESHELL
#+BEGIN_SRC elisp

  (use-package eshell
    :config
    (setq eshell-prompt-function
          (lambda ()
            (concat
             (format-time-string "[%H:%M]" (current-time))
             (if (magit-get-current-branch)
                 (concat "[git:" (magit-get-current-branch) "]" )
               "")
             " "
             (abbreviate-file-name (eshell/pwd))
             "\n"
             " > "
             )))

    (setq eshell-prompt-regexp " > ")   ; or "└─> "
    (setq eshell-prompt-string " > ")   ; or "└─> "
    )

#+END_SRC

* PROGRAMMING MODE
** markdown
#+BEGIN_SRC elisp

  (use-package markdown-mode
    :init
    (setq markdown-command "multimarkdown")
  
    :mode
    ("README\\.md\\'" . gfm-mode)
    )

#+END_SRC

** python
#+BEGIN_SRC elisp

  (use-package anaconda-mode
    :hook
    ((python-mode . anaconda-mode)
     (python-mode . anaconda-eldoc-mode))
    )

  (use-package company-anaconda
    :init 
    (require 'rx)

    :after 
    (company)

    :config
    (add-to-list 'company-backends 'company-anaconda)
    )

#+END_SRC

** web
#+BEGIN_SRC elisp

  (use-package company-web
    :init
    (require 'rx)

    :after
    (company)

    :config
    (add-to-list 'company-backends 'company-web-html)
    )

#+END_SRC

** c/c++
#+BEGIN_SRC elisp :tangle none
  (use-package cc-mode
    :init
    )

  (use-package company-clang
    :init
    (require 'rx)

    :after
    (company)
    )
#+END_SRC

** lua
#+BEGIN_SRC elisp
  (use-package lua-mode)
#+END_SRC

** R/ESS
#+BEGIN_SRC elisp
  (use-package ess)
#+END_SRC

** nasm
#+BEGIN_SRC elisp
(use-package nasm-mode
  :mode "\\.asm\\'")
#+END_SRC
* CUSTOM
#+BEGIN_SRC elisp

  ;; CUSTOM ---------------------------------------------------------------------

  (setq org-babel-python-command "python3"

        default-frame-alist
        '((font . "Source Code Pro-10"))

        org-plantuml-jar-path
        (expand-file-name "~/Programas/platinuml/plantuml-1.2022.2.jar")

        )

  (desktop-save-mode 1)

#+END_SRC
