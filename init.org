
#+TITLE:  init.org
#+AUTHOR: Luis Eduardo Galindo Amaya
#+DATE:   2021-06-03                        

#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el

TODO:
- añadir una funcion para estionar los temas.
- crear una seccion para los keybind.
- ordenar la seccion "Otros".
   
* Apariencia
#+BEGIN_SRC elisp
  ;; Tipografia 
  (set-face-attribute 'default nil
                      :font "Fira Code"
                      :height 98 )

  (add-to-list 'load-path "~/.emacs.d/")
  ;;(load-theme 'wombat)
  ;;(load-file "~/.emacs.d/themes/sea.el")

  (setq inhibit-startup-message t)             ;Pantalla de inicio de emacs 
  (global-display-line-numbers-mode t)         ;numeros de linea
  (scroll-bar-mode -1)                         ;scroll bars visibles
  (tool-bar-mode -1)		               ;barra de herramientas visisles
  (menu-bar-mode -1)		               ;menu de herramientas visible
  (set-fringe-mode 10)                         ;espacio entre el frame y el buffer
  ;;(set-face-background 'fringe "#ff0000")    ;color del fringe
  (global-visual-line-mode 1)	               ;separar lineas 
  (setq-default cursor-type 'bar)	       ;tipo del cursor

  ;; Modebar
  (setq column-number-mode t)	               ;numero de columna 
  (line-number-mode t)                         ;numero de fila
  (display-time-mode 1)                        ;mostrar la hora
  (display-battery-mode -1)	               ;mostrar batteria

  ;;(set-frame-parameter (selected-frame) 'undecorated t) ;frame visible
  ;;(set-frame-parameter (selected-frame) 'alpha '(95 95)) ;fondo trasparente
  ;;(add-to-list 'default-frame-alist '(alpha 85 85)) ;transparencia del borde

  ;; (custom-set-faces
  ;;  '(neo-root-dir-face ((t (:foreground "#8D8D84"))))
  ;;  '(neo-dir-link-face ((t (:foreground "#0000FF"))))
  ;;  '(neo-file-link-face ((t (:foreground "#BA36A5")))))
#+END_SRC


* Global keybinds
aqui se encuentra todos los keybinds *Globales* independientemente de los paquetes que usen, los keybinds para un modo espesifico.
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x e") 'eshell)
  (global-set-key (kbd "C-x j") 'neotree-toggle)
  (global-set-key (kbd "C-x <") 'ido-switch-buffer)
  (global-set-key (kbd "C-M-z") 'toggle-80-editting-columns-balanced)

  ;; Make ESC quit prompts
  ;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

* Packages setup
** package sources
#+BEGIN_SRC elisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)

(setq use-package-always-ensure t)
#+END_SRC

** path
#+BEGIN_SRC elisp
;(add-to-list 'load-path "~/.emacs.d/a/")
;(add-to-list 'load-path "./themes/")
#+END_SRC

* Package configuration 
configuraciones para los paquetes instalados, todo lo relacionado a un paquete, [[* Global keybinds][exepto su keybind]], debe estar en su correspondiente seccion.
** enabled
*** ivy
#+BEGIN_SRC elisp
  (use-package ivy
    :ensure t
    :diminish
    ;; :bind (
    ;; :map ivy-minibuffer-map
    ;;   ("TAB" . ivy-alt-done)
    ;;   ("C-l" . ivy-alt-done)
    ;;   ("C-j" . ivy-next-line)
    ;;   ("C-k" . ivy-previous-line)
    ;; :map ivy-switch-buffer-map
    ;;   ("C-k" . ivy-previous-line)
    ;;   ("C-l" . ivy-done)
    ;;   ("C-d" . ivy-switch-buffer-kill)
    ;; :map ivy-reverse-i-search-map
    ;;   ("C-k" . ivy-previous-line)
    ;;   ("C-d" . ivy-reverse-i-search-kill)
    ;; )
    :config
    (ivy-mode 1)			;Activar ivy en todos los buffers
    )
#+END_SRC

*** neotree
**** hook
#+BEGIN_SRC elisp
(add-hook 'neo-after-create-hook
  (lambda (&rest _) 
    (display-line-numbers-mode -1)
    (visual-line-mode -1)
  ))
#+END_SRC

**** settings
#+BEGIN_SRC elisp
(use-package neotree
 :ensure t)
(setq neo-theme 'ascii)
(setq neo-smart-open t)
(setq neo-window-width 25)
(setq neo-window-fixed-size -1)
#+END_SRC

**** theme
#+BEGIN_SRC elisp
;; (custom-set-faces
;;  '(neo-root-dir-face ((t (:foreground "#8D8D84"))))
;;  '(neo-dir-link-face ((t (:foreground "#0000FF"))))
;;  '(neo-file-link-face ((t (:foreground "#BA36A5")))))
#+END_SRC

*** rainbow-mode
#+BEGIN_SRC elisp
(use-package rainbow-mode
:ensure t)
#+END_SRC
*** magit 
#+BEGIN_SRC elisp
(use-package magit
 :ensure t)
#+END_SRC
** disabled
*** doom-modeline
#+BEGIN_SRC elisp
;; (doom-modeline 1)
;; (use-package doom-modeline
;;   :ensure t
;;   :init (doom-modeline-mode 1)
;;   :custom ((doom-modeline-height 15)))
#+END_SRC

*** zen-mode
origen: https://github.com/aki237/zen-mode
#+BEGIN_SRC elisp
;(require 'zen-mode)
;(global-set-key (kbd "C-M-z") 'zen-mode)
#+END_SRC

* ORG mode
Este modo lo uso tanto que pense que deberia tener su propia seccion.
fuentes: [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][Tamaño del la preview de latex]].
** hook
#+BEGIN_SRC elisp
  (add-hook 'org-mode-hook
    (lambda ()
      (setq org-support-shift-select t)
      (setq org-content 2)
      (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 1.5)) ;latex-preview size

      (org-indent-mode t)

      (define-key org-mode-map (kbd "<C-return>") ;preview latex
        'org-preview-latex-fragment))

      (org-reload)
    )
#+END_SRC

* Eshell
#+BEGIN_SRC elisp
(add-hook 'eshell-mode-hook
  (lambda (&rest _) 
    (display-line-numbers-mode -1)
    (visual-line-mode -1)
))
#+END_SRC
* Funciones
** Cerrar todos los buffer no activos
Extraido de la [[https://www.emacswiki.org/emacs/KillingBuffers#toc2][wiki de emacs]].
#+BEGIN_SRC elisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** Insertar la fecha del sistema
extraido de la [[https://www.emacswiki.org/emacs/InsertingTodaysDate][wiki de emacs]].
#+BEGIN_SRC elisp
(defun insert-current-date () (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
#+END_SRC

** Margen de 80 columnas
Extraido de [[https://qastack.mx/emacs/147/how-can-i-get-a-ruler-at-column-80][gastack]] desde la pregunta de [[https://gist.github.com/jordonbiondo/aa6d68b680abdb1a5f70][Jordonbiondo]].
#+BEGIN_SRC elisp
(defun toggle-80-editting-columns ()
  "Set the right window margin so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (set-window-margins nil 0 (max (- (window-width) 80) 0)))))

(defun toggle-80-editting-columns-balanced ()
  "Set both window margins so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (let* ((change (max (- (window-width) 80) 0))
             (left (/ change 2))
             (right (- change left)))
        (set-window-margins nil left right)))))
#+END_SRC
* Otros
#+BEGIN_SRC elisp
;(desktop-save-mode 1)			;guardar escritorio
;(find-file "~/notes.org")	                ;abrir archivo al iniciar
#+END_SRC
* Backups
extraido de [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-and-Backup.html][www.gnu.org]].
#+BEGIN_SRC elisp
(add-to-list 'backup-directory-alist
             (cons "." "~/.emacs.d/backups/"))
(customize-set-variable
 'tramp-backup-directory-alist backup-directory-alist)
#+END_SRC

\[x+1\]
