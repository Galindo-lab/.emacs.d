
#+TITLE:  init.org
#+AUTHOR: Luis Eduardo Galindo Amaya
#+DATE:   [2021-06-03]

#+LANGUAGE: es
#+PROPERTY: header-args :tangle init.el

* Paquetes
** Fuentes
#+BEGIN_SRC elisp

  ;; Fuetes
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Inicializar 'use-package' para plataformas no unix
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

#+END_SRC

** Configuraciónes
*** recentf
Mantiene una lista con los archivos abiertos recientemente, es necesario que este activado para mantener los registros.
#+BEGIN_SRC elisp 

  (require 'recentf)
  (recentf-mode 1)

#+END_SRC

*** ivy
Autocompletado en el minibufer.
#+BEGIN_SRC elisp

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

#+END_SRC

*** rainbow-mode
Colorear los valores RGB.
#+BEGIN_SRC elisp

  (use-package rainbow-mode
    :ensure t)

#+END_SRC

*** magit
Getor de git para emacs.
#+BEGIN_SRC elisp

  (use-package magit
    :ensure t)

#+END_SRC

*** crux
Collection of Ridiculously Useful eXtensions for Emacs.
#+BEGIN_SRC elisp

  (use-package crux
    :ensure t)

#+END_SRC

*** highlight todo
Resalta palabras como "TODO, NOTE, FIXME...".
#+BEGIN_SRC elisp

  (use-package hl-todo
    :ensure t
    :custom-face
    (hl-todo ((t (:inherit hl-todo :italic t))))
    :hook ((prog-mode . hl-todo-mode)
           (yaml-mode . hl-todo-mode)
           (org-mode . hl-todo-mode))
    :config
    (hl-todo-mode 1))

#+END_SRC

*** htmlize
Convierte source blocks a html.
#+BEGIN_SRC elisp

  (use-package htmlize
    :ensure t)

#+END_SRC

*** neotree
Muestra los folders en la sidebar.
#+BEGIN_SRC elisp

  ;; explorador de archivos 
  (use-package neotree
    :ensure t
    :config
    (setq neo-theme 'ascii
          neo-smart-open t
          neo-window-width 25
          neo-window-fixed-size -1) )

  ;; desactivar los numeros y el warp de texto 
  (add-hook 'neo-after-create-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

#+END_SRC

*** company
Marco de autocompletado de texto para Emacs.
#+BEGIN_SRC elisp

  (use-package company
   :ensure t
   :init (global-company-mode)
   :config
   (setq company-idle-delay 0
         company-minimum-prefix-length 2
         company-show-numbers t
         company-tooltip-limit 10
         company-tooltip-align-annotations t
         company-tooltip-flip-when-above t)

   ;; (global-company-mode t)
   )

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode))

#+END_SRC

*** csv-mode
#+BEGIN_SRC elisp
  (use-package csv-mode
    :ensure t)
#+END_SRC

*** dashboard
#+BEGIN_SRC elisp
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-startup-banner 1)
    (setq dashboard-center-content t)
    ;; (setq dashboard-banner-logo-title "your custom text")
    ;; (setq dashboard-startup-banner "/path/to/image")
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)))
    (dashboard-setup-startup-hook))

#+END_SRC

*** muban
#+BEGIN_SRC elisp
(use-package muban
  :ensure t
  :bind
  ("C-c i" . muban-apply))
#+END_SRC

*** rainbow-delimiters
#+BEGIN_SRC elisp
(use-package rainbow-delimiters
             :ensure t
             :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** emmet
#+BEGIN_SRC elisp

  (use-package emmet-mode
    :ensure t)

#+END_SRC

*** projectile
#+BEGIN_SRC elisp

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))

#+END_SRC

** Modos y Herramientas de Programación
*** Web
#+BEGIN_SRC elisp

  ;; para editar codigo html, css y js en el mismo archivo
  (use-package web-mode
    :ensure t)

#+END_SRC

*** Lua
#+BEGIN_SRC elisp

  (use-package lua-mode
    :ensure t)

#+END_SRC

*** Python (anaconda)
#+BEGIN_SRC elisp

  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    ;;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    )

  (use-package company-anaconda
    :ensure t
    :init (require 'rx)
    :after (company)
    :config
    (add-to-list 'company-backends 'company-anaconda)
    )

#+END_SRC

*** Racket
#+BEGIN_SRC elisp
  (use-package racket-mode
    :ensure t)
#+END_SRC

* Org
fuentes: [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][Tamaño del la preview de latex]], [[https://ivanaf.com/tikz_snippet_preview_in_orgmode.html][Preview tikz]], [[https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks][Indentar src blocks]].
#+BEGIN_SRC elisp

  (use-package org
    :bind
    (:map org-mode-map
          ("<M-return>" . org-toggle-latex-fragment))
    :config
    (setq org-babel-python-command "python3")
    (setq org-support-shift-select t)
    (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-html-htmlize-output-type `nil)
    (setf org-html-mathjax-template "<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script><script id='MathJax-script' async src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'></script>")
    ;preview tikz
    (setq org-src-tab-acts-natively t)	;indentar src_blocks
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale 1.5))) ;tamaño de preview

#+END_SRC

** hooks
#+BEGIN_SRC elisp

  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode t)
              (org-content 2)
              (display-line-numbers-mode -1)))

#+END_SRC

** Babel
#+BEGIN_SRC elisp

  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (python . t)
                               (latex . t)
                               (ditaa . t)
                               (maxima . t)))

#+END_SRC

** insertar svg al exportar a pdf en org-mode (Probando)
#+BEGIN_SRC elisp

  (setq org-latex-pdf-process
        (let
            ((cmd (concat "pdflatex -shell-escape -interaction nonstopmode"
                          " --synctex=1"
                          " -output-directory %o %f")))
          (list cmd
                "cd %o; if test -r %b.idx; then makeindex %b.idx; fi"
                "cd %o; bibtex %b"
                cmd
                cmd)))

#+END_SRC


* Configuración
** Tipografia
#+BEGIN_SRC elisp

  (set-face-attribute 'default nil
                      :font "Fira Code"
                      :height 98 )

#+END_SRC

** Apariencia
#+BEGIN_SRC elisp

  (setq inhibit-startup-message t)        ;Pantalla de inicio de emacs
  (global-display-line-numbers-mode t)    ;numeros de linea 
  (set-fringe-mode 10)                    ;espacio entre el frame y el buffer
  (global-visual-line-mode 1)             ;separar lineas 
  (setq-default cursor-type 'bar)         ;tipo del cursor
  (setq-default tab-width 4)              ;tamaño del tab
  (tool-bar-mode -1)                      ;barra de herramientas visisles
  (menu-bar-mode -1)                      ;menu de herramientas visible
  (setq column-number-mode t)             ;numero de columna en el modeline
  (line-number-mode t)                    ;numero de fila en el modeline
  (scroll-bar-mode -1)                    ;scroll bars visibles

#+END_SRC

#+BEGIN_SRC elisp :tangle no

  (display-time-mode -1)                  ;mostrar la hora
  (display-battery-mode -1)               ;mostrar batteria

#+END_SRC

** Frame
#+BEGIN_SRC elisp :tangle no

  (set-frame-parameter                    ;frame visible
   (selected-frame) 'undecorated t) 

  (set-frame-parameter                    ;fondo trasparente
   (selected-frame) 'alpha '(95 95))

  (add-to-list                            ;transparencia del borde
   'default-frame-alist '(alpha 85 85)) 

#+END_SRC

** Tema
#+BEGIN_SRC elisp

  ;; (use-package doom-themes 
  ;;   :ensure t
  ;;   :init (load-theme 'doom-one t))


  (use-package doom-themes 
    :ensure t
    :init (load-theme 'doom-opera t))

#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample-flat))
    :defer t
    :ensure t)

  (use-package underwater-theme)
  (use-package challenger-deep-theme)
  (use-package nord-theme)			  
  (use-package mood-one-theme)
  (use-package weyland-yutani-theme)
  (load-theme 'wombat)
#+END_SRC

** Comportamiento
#+BEGIN_SRC elisp

  ;; eliminar elemento seleccionado   
  (delete-selection-mode 1)	
  (setq-default indent-tabs-mode nil)	
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

#+END_SRC

#+BEGIN_SRC elisp :tangle no

  (desktop-save-mode 1)                   ;  guardar escritorio
  (find-file "~/notes.org")               ;  abrir archivo al iniciar

#+END_SRC

** Eshell
#+BEGIN_SRC elisp

  (add-hook 'eshell-mode-hook
            (lambda (&rest _) 
              (display-line-numbers-mode -1)
              (visual-line-mode -1)))

#+END_SRC

** Keybinds
#+BEGIN_SRC elisp

  ;; incluidas
  (global-set-key (kbd "C-x t") 'eshell)                                    
  (global-set-key (kbd "C-x j") 'neotree-toggle)                            
  (global-set-key (kbd "C-x <") 'ido-switch-buffer)                         
  (global-set-key (kbd "C-M-z") 'toggle-80-editting-columns-balanced)      

  ;; Crux
  (global-set-key (kbd "C-c f") 'crux-recentf-find-file)
  (global-set-key (kbd "C-,") 'crux-find-user-init-file)
  (global-set-key (kbd "C-x C-u") 'crux-upcase-region)
  (global-set-key (kbd "C-x C-l") 'crux-downcase-region)
  (global-set-key (kbd "C-x M-c") 'crux-capitalize-region)
  (global-set-key (kbd "C-c k") 'crux-kill-other-buffers)

  ;; muban
  (global-set-key (kbd "C-c i") 'muban-apply)

#+END_SRC

** Backups
Extraido de [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-and-Backup.html][www.gnu.org]].
#+BEGIN_SRC elisp

  (add-to-list 'backup-directory-alist
               (cons "." "~/.emacs.d/backups/"))

  (customize-set-variable
   'tramp-backup-directory-alist backup-directory-alist)

#+END_SRC

** Scratch Buffer
#+BEGIN_SRC elisp

(setq initial-major-mode 'org-mode)
(setq initial-scratch-message nil)
(setq org-confirm-babel-evaluate nil)

#+END_SRC

* Funciones
** Cerrar todos los buffer no activos
Extraido de la [[https://www.emacswiki.org/emacs/KillingBuffers#toc2][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp :tangle no

  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

#+END_SRC

** Insertar la fecha del sistema
extraido de la [[https://www.emacswiki.org/emacs/InsertingTodaysDate][wiki de emacs]]. Este paquete es reduntante con crux.
#+BEGIN_SRC elisp :tangle no

  (defun insert-current-date () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

#+END_SRC

** Margen de 80 columnas
Extraido de [[https://qastack.mx/emacs/147/how-can-i-get-a-ruler-at-column-80][gastack]] desde la pregunta de [[https://gist.github.com/jordonbiondo/aa6d68b680abdb1a5f70][Jordonbiondo]].
#+BEGIN_SRC elisp

(defun toggle-80-editting-columns ()
  "Set the right window margin so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (set-window-margins nil 0 (max (- (window-width) 80) 0)))))

(defun toggle-80-editting-columns-balanced ()
  "Set both window margins so the edittable space is only 80 columns."
  (interactive)
  (let ((margins (window-margins)))
    (if (or (car margins) (cdr margins))
        (set-window-margins nil 0 0)
      (let* ((change (max (- (window-width) 80) 0))
             (left (/ change 2))
             (right (- change left)))
        (set-window-margins nil left right)))))

#+END_SRC

* Modificaciones de Prueba
** Programas externos
[[https://www.reddit.com/r/emacs/comments/98prqr/how_would_i_make_a_keybinding_run_a_shell_command/][Reddit - how_would_i_make_a_keybinding_run_a_shell_command]]
#+BEGIN_SRC elisp :tangle no

  (defun run-buffer ()
    (interactive)
    (shell-command (concat "./eigenmath " buffer-file-name)))
  (global-set-key (kbd "<f9>") 'run-buffer)

#+END_SRC

** scolling suave
#+BEGIN_SRC elisp

  (setq scroll-step            1
        scroll-conservatively  10000)

#+END_SRC

** prettify simbols
#+BEGIN_SRC elisp :tangle no


    ;; (defun org-icons ()
    ;;   "Beautify org mode keywords."
    ;;   (setq prettify-symbols-alist '(("=>" . "⟹")
    ;;                                  ("<=" . "⟸")
    ;;                                  ("->" . "⟶")
    ;;                                  ("<-" . "⟵")))
    ;;   (prettify-symbols-mode))

  ;; (defun prettify-set ()
  ;;   (setq prettify-symbols-alist
  ;;         (prettify-utils-generate
  ;;          ("lambda"	"λ")
  ;;          ("|>"		"▷")
  ;;          ("<|"		"◁")
  ;;          ("->>"		"↠")
  ;;          ("->"		"→")
  ;;          ("<-"		"←")
  ;;          ("=>"		"⇒")
  ;;          ("<="		"≤")
  ;;          (">="		"≥")
  ;;          )))



#+END_SRC
